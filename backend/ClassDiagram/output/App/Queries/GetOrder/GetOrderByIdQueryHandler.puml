@startuml
class GetOrderByIdQueryHandler {
    - <<readonly>> _crmAdapter : CrmAdapter
    + GetOrderByIdQueryHandler(crmAdapter:CrmAdapter)
    + <<async>> Handle(request:GetOrderByIdQuery, cancellationToken:CancellationToken) : Task<OrderDto>
}
"IRequestHandler`2" "<GetOrderByIdQuery,OrderDto>" <|-- GetOrderByIdQueryHandler
GetOrderByIdQueryHandler ..> OrderDto: <<use>>
class OrderDto {
    + Id : int <<get>> <<set>>
    + CustomerId : int <<get>> <<set>>
    + ClientName : string? <<get>> <<set>>
}
class CancellationToken {
...
}
GetOrderByIdQueryHandler ..> CancellationToken: <<use>>
GetOrderByIdQueryHandler ..> GetOrderByIdQuery: <<use>>
class GetOrderByIdQuery {
    + Id : int <<get>> <<set>>
    + GetOrderByIdQuery(id:int)
}
"IRequest`1" "<OrderDto>" <|-- GetOrderByIdQuery
GetOrderByIdQueryHandler ..> CrmAdapter: <<use>>
class CrmAdapter {
    - <<readonly>> _crmApiClient : HttpClient
    - _logger : ILogger<CrmAdapter>
    - _crmJsonSerializerOptions : JsonSerializerOptions
    + CrmAdapter(httpClientFactory:IHttpClientFactory, logger:ILogger<CrmAdapter>)
    + <<async>> GetAllOrdersAsync() : Task<List<OrderDto>>
    + <<async>> GetOrderById(id:int) : Task<OrderDto>
}
class HttpClient {
...
}
CrmAdapter ..> HttpClient: <<use>>
interface IHttpClientFactory {
...
}
CrmAdapter ..> IHttpClientFactory: <<use>>
class JsonSerializerOptions {
...
}
CrmAdapter ..> JsonSerializerOptions: <<use>>
class List {
...
}
CrmAdapter ..> List: <<use>>
interface ILogger {
...
}
CrmAdapter ..> ILogger: <<use>>
CrmAdapter ..> Task: <<use>>
class Task {
...
}
GetOrderByIdQueryHandler ..> Task: <<use>>
@enduml