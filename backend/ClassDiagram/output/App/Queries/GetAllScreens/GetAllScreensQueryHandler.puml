@startuml
class GetAllScreensQueryHandler {
    - <<readonly>> _screenRepository : ScreenRepository
    + <<async>> Handle(request:GetAllScreensQuery, cancellationToken:CancellationToken) : Task<List<ScreenDto>>
}
"IRequestHandler`2" "<GetAllScreensQuery,List<ScreenDto>>" <|-- GetAllScreensQueryHandler
GetAllScreensQueryHandler ..> ScreenRepository: <<use>>
class ScreenRepository {
    - <<readonly>> _screens : List<Screen>
    + GetAllAsync() : Task<List<Screen>>
    + GetByIdAsync(id:int) : Task<Screen?>
    + AddAsync(screen:Screen) : Task
    + UpdateAsync(screen:Screen) : Task
    + DeleteAsync(id:int) : Task<bool>
    + updateScreenProfileDeleteAsync(screenProfileId:int) : Task
    - GetNextId() : int
}
ScreenRepository ..> Task: <<use>>
ScreenRepository ..> List: <<use>>
ScreenRepository ..> Screen: <<use>>
class Screen {
    + Id : int <<get>> <<set>>
    + ScreenProfileId : int <<get>> <<set>>
    + ScreenProfile : ScreenProfile <<get>> <<set>>
}
Screen ..> ScreenProfile: <<use>>
class ScreenProfile {
    + Id : int <<get>> <<set>>
    + Name : string <<get>> <<set>>
    + Screens : List<Screen> <<get>> <<set>>
}
ScreenProfile ..> List: <<use>>
class CancellationToken {
...
}
GetAllScreensQueryHandler ..> CancellationToken: <<use>>
GetAllScreensQueryHandler ..> GetAllScreensQuery: <<use>>
class GetAllScreensQuery {
}
"IRequest`1" "<List<ScreenDto>>" <|-- GetAllScreensQuery
GetAllScreensQueryHandler ..> ScreenDto: <<use>>
class ScreenDto {
    + Id : int <<get>> <<set>>
    + ScreenProfileId : int <<get>> <<set>>
}
class List {
...
}
GetAllScreensQueryHandler ..> List: <<use>>
class Task {
...
}
GetAllScreensQueryHandler ..> Task: <<use>>
@enduml