// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using POC.Infrastructure;

#nullable disable

namespace POC.Migrations
{
    [DbContext(typeof(OurDbContext))]
    partial class OurDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("POC.Infrastructure.Models.Screen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HashToken")
                        .HasColumnType("text");

                    b.Property<int>("ScreenProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScreenProfileId");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("POC.Infrastructure.Models.ScreenProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScreenProfiles");
                });

            modelBuilder.Entity("POC.Infrastructure.Models.Screen", b =>
                {
                    b.HasOne("POC.Infrastructure.Models.ScreenProfile", "ScreenProfile")
                        .WithMany("Screens")
                        .HasForeignKey("ScreenProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScreenProfile");
                });

            modelBuilder.Entity("POC.Infrastructure.Models.ScreenProfile", b =>
                {
                    b.OwnsOne("POC.Infrastructure.Models.ScreenProfileFiltering", "ScreenProfileFiltering", b1 =>
                        {
                            b1.Property<int>("ScreenProfileId")
                                .HasColumnType("integer");

                            b1.Property<List<string>>("InventorySorting")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("ScreenProfileId");

                            b1.ToTable("ScreenProfiles");

                            b1.WithOwner()
                                .HasForeignKey("ScreenProfileId");

                            b1.OwnsOne("POC.Infrastructure.Models.DisplayConfig", "DisplayConfig", b2 =>
                                {
                                    b2.Property<int>("ScreenProfileFilteringScreenProfileId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("DisplayTemplate")
                                        .HasColumnType("integer");

                                    b2.Property<bool>("IsPaging")
                                        .HasColumnType("boolean");

                                    b2.HasKey("ScreenProfileFilteringScreenProfileId");

                                    b2.ToTable("ScreenProfiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ScreenProfileFilteringScreenProfileId");
                                });

                            b1.OwnsOne("POC.Infrastructure.Models.InventoryFiltering", "InventoryFiltering", b2 =>
                                {
                                    b2.Property<int>("ScreenProfileFilteringScreenProfileId")
                                        .HasColumnType("integer");

                                    b2.Property<List<int>>("EntityIds")
                                        .HasColumnType("integer[]");

                                    b2.HasKey("ScreenProfileFilteringScreenProfileId");

                                    b2.ToTable("ScreenProfiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ScreenProfileFilteringScreenProfileId");
                                });

                            b1.OwnsOne("POC.Infrastructure.Models.OrderFiltering", "OrderFiltering", b2 =>
                                {
                                    b2.Property<int>("ScreenProfileFilteringScreenProfileId")
                                        .HasColumnType("integer");

                                    b2.Property<List<int>>("EntityIds")
                                        .HasColumnType("integer[]");

                                    b2.Property<bool?>("IsPickup")
                                        .HasColumnType("boolean");

                                    b2.Property<bool?>("IsSale")
                                        .HasColumnType("boolean");

                                    b2.Property<int[]>("OrderStatuses")
                                        .HasColumnType("integer[]");

                                    b2.Property<int[]>("Tags")
                                        .HasColumnType("integer[]");

                                    b2.HasKey("ScreenProfileFilteringScreenProfileId");

                                    b2.ToTable("ScreenProfiles");

                                    b2.WithOwner()
                                        .HasForeignKey("ScreenProfileFilteringScreenProfileId");

                                    b2.OwnsOne("POC.Infrastructure.Common.utils.TimeRangePart", "From", b3 =>
                                        {
                                            b3.Property<int>("OrderFilteringScreenProfileFilteringScreenProfileId")
                                                .HasColumnType("integer");

                                            b3.Property<int>("Amount")
                                                .HasColumnType("integer");

                                            b3.Property<int>("Mode")
                                                .HasColumnType("integer");

                                            b3.Property<int>("Unit")
                                                .HasColumnType("integer");

                                            b3.HasKey("OrderFilteringScreenProfileFilteringScreenProfileId");

                                            b3.ToTable("ScreenProfiles");

                                            b3.WithOwner()
                                                .HasForeignKey("OrderFilteringScreenProfileFilteringScreenProfileId");
                                        });

                                    b2.OwnsOne("POC.Infrastructure.Common.utils.TimeRangePart", "To", b3 =>
                                        {
                                            b3.Property<int>("OrderFilteringScreenProfileFilteringScreenProfileId")
                                                .HasColumnType("integer");

                                            b3.Property<int>("Amount")
                                                .HasColumnType("integer");

                                            b3.Property<int>("Mode")
                                                .HasColumnType("integer");

                                            b3.Property<int>("Unit")
                                                .HasColumnType("integer");

                                            b3.HasKey("OrderFilteringScreenProfileFilteringScreenProfileId");

                                            b3.ToTable("ScreenProfiles");

                                            b3.WithOwner()
                                                .HasForeignKey("OrderFilteringScreenProfileFilteringScreenProfileId");
                                        });

                                    b2.Navigation("From")
                                        .IsRequired();

                                    b2.Navigation("To")
                                        .IsRequired();
                                });

                            b1.Navigation("DisplayConfig")
                                .IsRequired();

                            b1.Navigation("InventoryFiltering");

                            b1.Navigation("OrderFiltering")
                                .IsRequired();
                        });

                    b.Navigation("ScreenProfileFiltering")
                        .IsRequired();
                });

            modelBuilder.Entity("POC.Infrastructure.Models.ScreenProfile", b =>
                {
                    b.Navigation("Screens");
                });
#pragma warning restore 612, 618
        }
    }
}
